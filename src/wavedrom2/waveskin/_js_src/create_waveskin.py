from __future__ import annotations

import os
import json

import demjson3


def _header(skin_type: str) -> str:
    return f"""# MIT License
#
# Copyright (c) 2011-2025 Aliaksei Chapyzhenka, BreizhGeek, Kazuki Yamamoto,
#                         MutantPlatypus, Stefan Wallentowitz, Benjamin Davis
#
# This software is licensed under the MIT License.
# See the LICENSE file in the project root for the full license text.
\"\"\"Automatically generated file for the {skin_type} wave-skin.\"\"\"

# *Note: This file is automatically generated. Do not edit it directly.*

# Ignore line lengths in this generated file
# ruff: noqa: E501
"""


def main():
    for dirpath, _, filenames in os.walk(os.path.dirname(__file__)):
        for filename in filenames:
            if filename.endswith(".js"):
                data = get_data(os.path.join(dirpath, filename))
                skin_type = filename.replace(".js", "")
                create_python_module(data, skin_type)


def get_data(file_path: str) -> list:
    with open(file_path, "r") as f:
        data = demjson3.decode(f.read())
        if not isinstance(data, list):
            raise ValueError("Invalid data format")
        return data


def create_python_module(data: list, skin_type: str) -> None:
    with open(f"{os.path.dirname(__file__)}/../{skin_type}.py", "w") as f:
        f.write(_header(skin_type) + "\n")

        f.write(f"{skin_type.upper()}_CSS = \"")
        f.write(get_css_data(data))
        f.write("\"\n\n")

        f.write(f"{skin_type.upper()}_WAVESKIN = ")
        f.write(json.dumps(data, indent=4))
        f.write("\n")


def get_css_data(data: list) -> str:
    for item in data:
        if isinstance(item, list) and "style" in item and len(item) >= 3:
            if not isinstance(item[2], str):
                raise ValueError("Invalid CSS data format")
            return item[2]
    raise ValueError("No CSS data found")


if __name__ == "__main__":
    main()
